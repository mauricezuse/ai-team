{
  "feature": "User can leave feedback for completed jobs",
  "pm": "1. As a user, I want to be able to leave feedback for completed jobs so that I can provide my opinion on the service.\n\nAcceptance Criteria:\n- User must be logged in to leave feedback.\n- User can only leave feedback for jobs that are marked as completed.\n- User can leave a rating (1-5 stars) and a written comment for each completed job.\n- Feedback is viewable by the job poster and the service provider.\n- User can edit or delete their feedback within 24 hours of posting.\n\n2. As a job poster, I want to be able to see the feedback left by users for my completed jobs so that I can assess the quality of the service provided.\n\nAcceptance Criteria:\n- Job poster can view the overall rating based on all feedback for a completed job.\n- Job poster can read the written comments left by users for each completed job.\n- Job poster can filter feedback based on different criteria (e.g. date, rating).\n\n3. As a service provider, I want to be able to see the feedback left by users for my completed jobs so that I can improve my services based on customer feedback.\n\nAcceptance Criteria:\n- Service provider can view the overall rating based on all feedback received for completed jobs.\n- Service provider can read the written comments left by users for each completed job.\n- Service provider can filter feedback based on different criteria (e.g. date, rating).",
  "architect": "Certainly! Here\u2019s a **high-level software architecture** for a web platform that supports your feedback system. We\u2019ll address components, data models, APIs, and workflows.\n\n---\n\n## 1. Main Components / Services\n\n- **Frontend**  \n  UI for user interactions (feedback input, viewing, filtering, etc.)\n\n- **API Gateway**  \n  RESTful endpoints for web/mobile clients.\n\n- **Authentication Service**  \n  Handles login, session tokens.\n\n- **User Service**  \n  User profiles, roles (user, job poster, service provider)\n\n- **Job Service**  \n  Job listings, completion status, associations between jobs, users, and providers.\n\n- **Feedback Service**  \n  Handles creating, editing, deleting, and retrieving feedback.\n\n- **Notification Service (optional)**  \n  Notifies job posters/service providers of new feedback.\n\n- **Database**  \n  Stores all persistent data (users, jobs, feedback).\n\n---\n\n## 2. Key Data Models\n\n```python\n# User\nclass User:\n    id: UUID\n    email: str\n    name: str\n    role: Enum('user', 'job_poster', 'service_provider')\n\n# Job\nclass Job:\n    id: UUID\n    title: str\n    description: str\n    poster_id: UUID        # User (job poster)\n    provider_id: UUID      # User (service provider)\n    status: Enum('open', 'in_progress', 'completed', 'cancelled')\n    completed_at: datetime\n\n# Feedback\nclass Feedback:\n    id: UUID\n    job_id: UUID\n    user_id: UUID          # Reviewer (who leaves feedback)\n    rating: int            # 1-5\n    comment: str\n    created_at: datetime\n    updated_at: datetime\n    deleted: bool\n```\n\n---\n\n## 3. API Endpoints\n\n### Auth\n\n- `POST /auth/login`\n- `POST /auth/logout`\n\n---\n\n### Feedback\n\n```http\n# Create feedback (user, completed job)\nPOST /jobs/{job_id}/feedback\nBody: { rating: int, comment: str }\n\n# Update feedback (within 24h)\nPUT /feedback/{feedback_id}\nBody: { rating?: int, comment?: str }\n\n# Delete feedback (within 24h, soft delete)\nDELETE /feedback/{feedback_id}\n\n# List feedback for a job (accessible to job poster / service provider)\nGET /jobs/{job_id}/feedbacks\nQuery: ?sort_by=date|rating",
  "developer": "Certainly! Here\u2019s a **sample FastAPI backend** implementing the main parts of your architecture, illustrating:\n\n- Models (with [SQLModel](https://sqlmodel.tiangolo.com/) for SQLite, but could use SQLAlchemy/Pydantic instead)\n- Feedback create/list API endpoints\n- Basic setup for authentication (token check stub)\n- Required DB/config code\n\n---\n\n```python\n# main.py\n\nfrom fastapi import FastAPI, Depends, HTTPException, status, Path\nfrom fastapi.security import OAuth2PasswordBearer\nfrom typing import Optional, List\nfrom uuid import UUID, uuid4\nfrom sqlmodel import Field, SQLModel, create_engine, Session, select\nfrom datetime import datetime, timedelta\nimport enum\n\n# ========== Models ==========\nclass UserRole(str, enum.Enum):\n    user = \"user\"\n    job_poster = \"job_poster\"\n    service_provider = \"service_provider\"\n\nclass JobStatus(str, enum.Enum):\n    open = \"open\"\n    in_progress = \"in_progress\"\n    completed = \"completed\"\n    cancelled = \"cancelled\"\n\nclass User(SQLModel, table=True):\n    id: UUID = Field(default_factory=uuid4, primary_key=True)\n    email: str\n    name: str\n    role: UserRole\n\nclass Job(SQLModel, table=True):\n    id: UUID = Field(default_factory=uuid4, primary_key=True)\n    title: str\n    description: str\n    poster_id: UUID = Field(foreign_key=\"user.id\")\n    provider_id: UUID = Field(foreign_key=\"user.id\")\n    status: JobStatus\n    completed_at: Optional[datetime]\n\nclass Feedback(SQLModel, table=True):\n    id: UUID = Field(default_factory=uuid4, primary_key=True)\n    job_id: UUID = Field(foreign_key=\"job.id\")\n    user_id: UUID = Field(foreign_key=\"user.id\")      # Reviewer\n    rating: int\n    comment: str\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n    updated_at: datetime = Field(default_factory=datetime.utcnow)\n    deleted: bool = False\n\n# ========== Auth Setup (mock login) ==========\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"auth/login\")\n\ndef fake_decode_token(token: str):\n    # Replace with real decoding\n    # Here: always returns a sample user as \"user\"\n    return User(id=uuid4(), email=\"test@x.com\", name=\"Test User\",",
  "reviewer": "role=UserRole.user)\n\ndef get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials.\",\n        )\n    return user\n\n# ========== DB Setup ==========\nDATABASE_URL = \"sqlite:///jobs.db\"\nengine = create_engine(DATABASE_URL)\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# ========== API Setup ==========\napp = FastAPI()\n\n# Create tables\nSQLModel.metadata.create_all(engine)\n\n@app.post(\"/feedback/\", response_model=Feedback, status_code=status.HTTP_201_CREATED)\ndef create_feedback(feedback: Feedback, session: Session = Depends(get_session), user: User = Depends(get_current_user)):\n    feedback.created_at = datetime.utcnow()   # Override creation date\n    feedback.updated_at = datetime.utcnow()\n\n    session.add(feedback)\n    session.commit()\n    session.refresh(feedback)\n\n    return feedback\n\n@app.get(\"/feedback/\", response_model=List[Feedback])\ndef list_feedback(skip: int = 0, limit: int = 10, session: Session = Depends(get_session)):\n    statement = select(Feedback).where(Feedback.deleted == False).offset(skip).limit(limit)\n\n    results = session.exec(statement).all()\n    return results\n\n@app.get(\"/feedback/{feedback_id}\", response_model=Feedback)\ndef read_feedback(feedback_id: UUID, session: Session = Depends(get_session)):\n    feedback = session.get(Feedback, feedback_id)\n    if not feedback or feedback.deleted:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Feedback not found.\")\n    return feedback\n\n@app.delete(\"/feedback/{feedback_id}\", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_feedback(feedback_id: UUID, session: Session = Depends(get_session), user: User = Depends(get_current_user)):\n    feedback = session.get(Feedback, feedback_id)\n    if not feedback or feedback.deleted:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Feedback not found.\")\n\n    feedback.deleted = True\n    feedback.updated_at = datetime.utcnow()\n\n    session.add(feedback)\n    session.commit()\n\n    return {\"detail\": \"Feedback deleted.\"}\n\n# Additional endpoints (Jobs, Users) can be defined similarly\n\n```\n\n**Review & Suggestions:**\n\n1. **Security Considerations:**\n   - The `fake_decode_token` method always returns a default user and does not",
  "tester": "```python\n    title: str\n    description: str\n    status: JobStatus = Field(default=JobStatus.open)\n    created_by: UUID\n    assigned_to: Optional[UUID]\n    start_date: Optional[datetime] = Field(default=None)\n    end_date: Optional[datetime] = Field(default=None)\n    \nclass Feedback(SQLModel, table=True):\n    id: UUID = Field(default_factory=uuid4, primary_key=True)\n    job_id: UUID\n    user_id: UUID\n    comment: str\n    rating: int\n\n# ========== Database Setup ==========\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\nengine = create_engine(sqlite_url, echo=True)\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n# ========== OAuth2 Setup ==========\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\ndef fake_decode_token(token):\n    # This is just a stub for now\n    return {\"sub\": \"user@example.com\", \"role\": \"user\"}\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    payload = fake_decode_token(token)\n    if not payload:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n        )\n    return User(id=uuid4(), email=payload['sub'], name=\"John Doe\", role=UserRole.user)\n\n# ========== FastAPI App ==========\napp = FastAPI()\n\n# Create tables before the application starts\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n# ========== Feedback Endpoints ==========\n@app.post(\"/feedback/\", response_model=Feedback)\nasync def create_feedback(\n    feedback: Feedback,\n    current_user: User = Depends(get_current_user)\n):\n    with Session(engine) as session:\n        session.add(feedback)\n        session.commit()\n        session.refresh(feedback)\n        return feedback\n\n@app.get(\"/feedback/\", response_model=List[Feedback])\nasync def list_feedback(\n    skip: int = 0, \n    limit: int = 10, \n    current_user: User = Depends(get_current_user)\n):\n    with Session(engine) as session:\n        feedbacks = session.exec(select(Feedback).offset(skip).limit(limit)).all()\n        return feedbacks\n\n```\n\nTo test this FastAPI application, we'll write unit and integration tests using pytest. We will primarily focus on the `create_feedback` and `list_feedback`"
}